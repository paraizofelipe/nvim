M = {}

local function load_config()
	local wk = require("which-key")

	wk.setup({
		plugins = {
			marks = true,
			registers = true,
			spelling = {
				enabled = false,
				suggestions = 20,
			},

			presets = {
				operators = false,
				motions = false,
				text_objects = false,
				windows = true,
				nav = true,
				z = true,
				g = true,
			},
		},
		keys = {
			["<space>"] = "SPC",
			["<cr>"] = "RET",
			["<tab>"] = "TAB",
		},
		icons = {
			breadcrumb = "»",
			separator = "➜",
			group = "+",
		},
		win = {
			border = "none",
			padding = { 2, 2 },
		},
		layout = {
			height = { min = 4, max = 25 },
			width = { min = 20, max = 50 },
			spacing = 3,
			align = "left",
		},
		show_help = true,
		-- triggers = "auto",
	})

	wk.add({
		{
			{ "<leader>1", "<Cmd>BufferLineGoToBuffer 1<CR>", hidden = true, nowait = true, remap = false },
			{ "<leader>2", "<Cmd>BufferLineGoToBuffer 2<CR>", hidden = true, nowait = true, remap = false },
			{ "<leader>3", "<Cmd>BufferLineGoToBuffer 3<CR>", hidden = true, nowait = true, remap = false },
			{ "<leader>4", "<Cmd>BufferLineGoToBuffer 4<CR>", hidden = true, nowait = true, remap = false },
			{ "<leader>5", "<Cmd>BufferLineGoToBuffer 5<CR>", hidden = true, nowait = true, remap = false },
			{ "<leader>6", "<Cmd>BufferLineGoToBuffer 6<CR>", hidden = true, nowait = true, remap = false },
			{ "<leader>7", "<Cmd>BufferLineGoToBuffer 7<CR>", hidden = true, nowait = true, remap = false },
			{ "<leader>8", "<Cmd>BufferLineGoToBuffer 8<CR>", hidden = true, nowait = true, remap = false },
			{ "<leader>9", "<Cmd>BufferLineGoToBuffer 9<CR>", hidden = true, nowait = true, remap = false },
			{
				"<leader>/",
				'<cmd>lua require("Comment.api").toggle.linewise.current()<CR>',
				desc = "Comment",
				nowait = true,
				remap = false,
			},
			{
				"<leader>B",
				"<cmd>lua require('telescope.builtin').buffers(require('telescope.themes').get_dropdown{previewer = false})<cr>",
				desc = "Buffers",
				nowait = true,
				remap = false,
			},
			{ "<leader>F", "<cmd>Telescope live_grep theme=ivy<cr>", desc = "Find Text", nowait = true, remap = false },
			{ "<leader>P", "<cmd>Telescope projects<cr>", desc = "Projects", nowait = true, remap = false },
			{ "<leader>a", group = "Applications", nowait = true, remap = false },
			{
				"<leader>ad",
				"<cmd>FloatermNew --wintype=float --width=0.8 --height=0.8 lazydocker<cr>",
				desc = "Docker",
				nowait = true,
				remap = false,
			},
			{
				"<leader>al",
				"<cmd>FloatermNew --wintype=float --width=0.8 --height=0.8 tasks<cr>",
				desc = "Tasks",
				nowait = true,
				remap = false,
			},
			-- { "<leader>ag", "<cmd>LazyGit<cr>", desc = "Git", nowait = true, remap = false },
			{ "<leader>am", "<cmd>MakeitOpen<cr>", desc = "Makefile", nowait = true, remap = false },
			{ "<leader>ag", "<cmd>Neogit kind=floating<cr>", desc = "Git", nowait = true, remap = false },
			{ "<leader>an", "<cmd>FloatermNew node<cr>", desc = "Node", nowait = true, remap = false },
			{ "<leader>ap", "<cmd>FloatermNew ipython3<cr>", desc = "Python", nowait = true, remap = false },
			{
				"<leader>ar",
				"<cmd>FloatermNew --wintype=float --width=0.8 --height=0.8 ranger<cr>",
				desc = "Ranger",
				nowait = true,
				remap = false,
			},
			{ "<leader>at", "<cmd>FloatermNew<cr>", desc = "Terminal", nowait = true, remap = false },
			{ "<leader>b", group = "buffers", nowait = true, remap = false },
			{ "<leader>bc", "<cmd>bwipeout<cr>", desc = "Close buffers", nowait = true, remap = false },
			{ "<leader>bd", "<cmd>BufDel!<CR>", desc = "Delete Buffer", nowait = true, remap = false },
			{ "<leader>bj", "<cmd>BufferLinePick<cr>", desc = "Jump", nowait = true, remap = false },
			{
				"<leader>bl",
				"<cmd>lua require('telescope.builtin').buffers(require('telescope.themes').get_dropdown{previewer = false})<cr>",
				desc = "Buffers",
				nowait = true,
				remap = false,
			},
			{ "<leader>bn", "<cmd>bnext<cr>", desc = "Next buffer", nowait = true, remap = false },
			{ "<leader>bp", "<cmd>bprevious<cr>", desc = "Previous buffer", nowait = true, remap = false },
			{ "<leader>c", group = "Coverage", nowait = true, remap = false },
			{ "<leader>cc", "<cmd>:Coverage<CR><cr>", desc = "Active coverage", nowait = true, remap = false },
			{
				"<leader>cs",
				"<cmd>:CoverageSummary<CR><cr>",
				desc = "Show coverage summary",
				nowait = true,
				remap = false,
			},
			{
				"<leader>ct",
				"<cmd>:CoverageToggle<CR><cr>",
				desc = "Toggle coverage sign",
				nowait = true,
				remap = false,
			},
			{ "<leader>d", group = "debug", nowait = true, remap = false },
			{
				"<leader>dC",
				"<cmd>lua require'dap'.clear_breakpoints()<cr>",
				desc = "Clear breakpoint",
				nowait = true,
				remap = false,
			},
			{ "<leader>dc", "<cmd>lua require('dap').continue()<cr>", desc = "Continue", nowait = true, remap = false },
			{
				"<leader>de",
				"<cmd>lua require('dapui').eval()<cr>",
				desc = "Eval expression",
				nowait = true,
				remap = false,
			},
			{
				"<leader>di",
				"<cmd>lua require('dap').step_into()<cr>",
				desc = "Step into",
				nowait = true,
				remap = false,
			},
			{
				"<leader>dl",
				"<cmd>lua require('dap.ext.vscode').load_launchjs(vim.fn.getcwd() .. '/launch.json')<cr>",
				desc = "Load launch files",
				nowait = true,
				remap = false,
			},
			{
				"<leader>dn",
				"<cmd>lua require('dap').step_over()<cr>",
				desc = "Step over",
				nowait = true,
				remap = false,
			},
			{ "<leader>do", "<cmd>lua require('dap').step_out()<cr>", desc = "Step out", nowait = true, remap = false },
			{
				"<leader>dr",
				"<cmd>lua require('dap').restart()<cr>",
				desc = "Restart Debug",
				nowait = true,
				remap = false,
			},
			{
				"<leader>ds",
				"<cmd>lua local _, _ = require('dapui').close(), require('dap').close()<cr>",
				desc = "Stop Debug",
				nowait = true,
				remap = false,
			},
			{
				"<leader>dt",
				"<cmd>lua require'dap'.toggle_breakpoint()<cr>",
				desc = "Toggle breakpoint",
				nowait = true,
				remap = false,
			},
			{
				"<leader>du",
				"<cmd>lua require('dapui').toggle()<cr>",
				desc = "Toggle UI",
				nowait = true,
				remap = false,
			},
			{
				"<leader>dw",
				"<cmd>lua require('dapui').watches()<cr>",
				desc = "Watch values",
				nowait = true,
				remap = false,
			},
			{ "<leader>e", "<cmd>NvimTreeToggle<cr>", desc = "Explorer", nowait = true, remap = false },
			{
				"<leader>f",
				"<cmd>lua require('telescope.builtin').find_files(require('telescope.themes').get_dropdown{previewer = false})<cr>",
				desc = "Find files",
				nowait = true,
				remap = false,
			},
			{ "<leader>g", group = "Git", nowait = true, remap = false },
			{
				"<leader>gR",
				"<cmd>lua require 'gitsigns'.reset_buffer()<cr>",
				desc = "Reset Buffer",
				nowait = true,
				remap = false,
			},
			{ "<leader>gb", "<cmd>Telescope git_branches<cr>", desc = "Checkout branch", nowait = true, remap = false },
			{ "<leader>gc", "<cmd>Telescope git_commits<cr>", desc = "Checkout commit", nowait = true, remap = false },
			{ "<leader>gd", "<cmd>Gitsigns diffthis HEAD<cr>", desc = "Diff", nowait = true, remap = false },
			{
				"<leader>gj",
				"<cmd>lua require 'gitsigns'.next_hunk()<cr>",
				desc = "Next Hunk",
				nowait = true,
				remap = false,
			},
			{
				"<leader>gk",
				"<cmd>lua require 'gitsigns'.prev_hunk()<cr>",
				desc = "Prev Hunk",
				nowait = true,
				remap = false,
			},
			{
				"<leader>gl",
				"<cmd>lua require 'gitsigns'.blame_line()<cr>",
				desc = "Blame",
				nowait = true,
				remap = false,
			},
			{ "<leader>go", "<cmd>Telescope git_status<cr>", desc = "Open changed file", nowait = true, remap = false },
			{
				"<leader>gp",
				"<cmd>lua require 'gitsigns'.preview_hunk()<cr>",
				desc = "Preview Hunk",
				nowait = true,
				remap = false,
			},
			{
				"<leader>gr",
				"<cmd>lua require 'gitsigns'.reset_hunk()<cr>",
				desc = "Reset Hunk",
				nowait = true,
				remap = false,
			},
			{
				"<leader>gs",
				"<cmd>lua require 'gitsigns'.stage_hunk()<cr>",
				desc = "Stage Hunk",
				nowait = true,
				remap = false,
			},
			{
				"<leader>gu",
				"<cmd>lua require 'gitsigns'.undo_stage_hunk()<cr>",
				desc = "Undo Stage Hunk",
				nowait = true,
				remap = false,
			},
			{ "<leader>h", "<cmd>nohlsearch<CR>", desc = "No Highlight", nowait = true, remap = false },
			{ "<leader>l", group = "LSP", nowait = true, remap = false },
			{ "<leader>lI", "<cmd>LspInstallInfo<cr>", desc = "Installer Info", nowait = true, remap = false },
			{
				"<leader>lS",
				"<cmd>Telescope lsp_dynamic_workspace_symbols<cr>",
				desc = "Workspace Symbols",
				nowait = true,
				remap = false,
			},
			{
				"<leader>la",
				"<cmd>lua vim.lsp.buf.code_action()<cr>",
				desc = "Code Action",
				nowait = true,
				remap = false,
			},
			{ "<leader>lc", "<cmd>ToggleCoverage<cr>", desc = "Toggle coverage buffer", nowait = true, remap = false },
			{
				"<leader>ld",
				"<cmd>Telescope diagnostics<cr>",
				desc = "Workspace Diagnostics",
				nowait = true,
				remap = false,
			},
			{
				"<leader>lf",
				"<cmd>lua vim.lsp.buf.format({ async = true })<cr>",
				desc = "Format",
				nowait = true,
				remap = false,
			},
			{ "<leader>li", "<cmd>LspInfo<cr>", desc = "Info", nowait = true, remap = false },
			{
				"<leader>lj",
				"<cmd>lua vim.lsp.diagnostic.goto_next()<CR>",
				desc = "Next Diagnostic",
				nowait = true,
				remap = false,
			},
			{
				"<leader>lk",
				"<cmd>lua vim.lsp.diagnostic.goto_prev()<cr>",
				desc = "Prev Diagnostic",
				nowait = true,
				remap = false,
			},
			{
				"<leader>ll",
				"<cmd>lua vim.lsp.codelens.run()<cr>",
				desc = "CodeLens Action",
				nowait = true,
				remap = false,
			},
			{
				"<leader>lq",
				"<cmd>lua vim.lsp.diagnostic.set_loclist()<cr>",
				desc = "Quickfix",
				nowait = true,
				remap = false,
			},
			{ "<leader>lr", "<cmd>lua vim.lsp.buf.rename()<cr>", desc = "Rename", nowait = true, remap = false },
			{
				"<leader>ls",
				"<cmd>Telescope lsp_document_symbols<cr>",
				desc = "Document Symbols",
				nowait = true,
				remap = false,
			},
			{ "<leader>m", group = "Mergetools", nowait = true, remap = false },
			{
				"<leader>ml",
				"<cmd>MergetoolPreferLocal<cr>",
				desc = "MergetoolPreferLocal",
				nowait = true,
				remap = false,
			},
			{
				"<leader>mr",
				"<cmd>MergetoolPreferRemote<cr>",
				desc = "MergetoolPreferRemote",
				nowait = true,
				remap = false,
			},
			{ "<leader>mt", "<cmd>MergetoolToggle<cr>", desc = "MergetoolToggle", nowait = true, remap = false },
			{ "<leader>q", group = "Sessions", nowait = true, remap = false },
			{
				"<leader>qs",
				"<cmd>:Telescope session-lens search_session<CR><cr>",
				desc = "Search of directory",
				nowait = true,
				remap = false,
			},
			{ "<leader>r", "<C-w>", desc = "Control Window", nowait = true, remap = false },
			{ "<leader>s", group = "Search", nowait = true, remap = false },
			{
				"<leader>sC",
				"<cmd>ShowWorkspaceSymbol constant<cr>",
				desc = "Find constants in workspace",
				nowait = true,
				remap = false,
			},
			{ "<leader>sM", "<cmd>Telescope man_pages<cr>", desc = "Man Pages", nowait = true, remap = false },
			{ "<leader>sR", "<cmd>Telescope registers<cr>", desc = "Registers", nowait = true, remap = false },
			{ "<leader>sb", "<cmd>Telescope git_branches<cr>", desc = "Checkout branch", nowait = true, remap = false },
			{
				"<leader>sc",
				"<cmd>ShowWorkspaceSymbol class<cr>",
				desc = "Find class in workspace",
				nowait = true,
				remap = false,
			},
			{
				"<leader>sf",
				"<cmd>ShowWorkspaceSymbol function<cr>",
				desc = "Find functions in workspace",
				nowait = true,
				remap = false,
			},
			{ "<leader>sh", "<cmd>Telescope help_tags<cr>", desc = "Find Help", nowait = true, remap = false },
			{ "<leader>sk", "<cmd>Telescope keymaps<cr>", desc = "Keymaps", nowait = true, remap = false },
			{
				"<leader>sm",
				"<cmd>ShowWorkspaceSymbol method<cr>",
				desc = "Find methods in workspace",
				nowait = true,
				remap = false,
			},
			{ "<leader>sr", "<cmd>Telescope oldfiles<cr>", desc = "Open Recent File", nowait = true, remap = false },
			{
				"<leader>ss",
				"<cmd>ShowWorkspaceSymbol struct<cr>",
				desc = "Find struct in workspace",
				nowait = true,
				remap = false,
			},
			{ "<leader>st", "<cmd>Telescope live_grep<cr>", desc = "Find Text", nowait = true, remap = false },
			{ "<leader>t", group = "Tests", nowait = true, remap = false },
			{
				"<leader>ta",
				'<cmd>lua require("neotest").run.attach()<cr>',
				desc = "Attach PDB",
				nowait = true,
				remap = false,
			},
			{
				"<leader>td",
				'<cmd>lua require("neotest").run.run({strategy = "dap"})<cr>',
				desc = "Run tests in debug",
				nowait = true,
				remap = false,
			},
			{
				"<leader>tl",
				'<cmd>lua require("neotest").run.run_last()<cr>',
				desc = "Run last test",
				nowait = true,
				remap = false,
			},
			{
				"<leader>tn",
				'<cmd>lua require("neotest").run.run()<cr>',
				desc = "Run nearest",
				nowait = true,
				remap = false,
			},
			{
				"<leader>to",
				'<cmd>lua require("neotest").output.open({ enter = true })<cr>',
				desc = "Show output",
				nowait = true,
				remap = false,
			},
			{
				"<leader>tr",
				'<cmd>lua require("neotest").run.run(vim.fn.expand("%"))<cr>',
				desc = "Run tests",
				nowait = true,
				remap = false,
			},
			{
				"<leader>ts",
				'<cmd>lua require("neotest").summary.toggle()<cr>',
				desc = "Show summary tests",
				nowait = true,
				remap = false,
			},
			{ "<leader>tv", "<cmd>HighlightCoverage<cr>", desc = "Coverage", nowait = true, remap = false },
			{
				"<leader>w",
				"<cmd>lua local wid = require('window-picker').pick_window(); if wid then vim.api.nvim_set_current_win(wid) end<CR>",
				desc = "Pick Window",
				nowait = true,
				remap = false,
			},
			{
				mode = { "v" },
				{
					"<leader>/",
					'<ESC><cmd>lua require("Comment.api").toggle.linewise(vim.fn.visualmode())<CR>',
					desc = "Comment",
					nowait = true,
					remap = false,
				},
				{ "<leader>rc", "<ESC><cmd>SnipClose<CR>", desc = "Close run", nowait = true, remap = false },
				{ "<leader>rr", "<ESC><cmd>SnipReset<CR>", desc = "Reset code", nowait = true, remap = false },
				{ "<leader>rx", "<ESC><cmd>SnipRun<CR>", desc = "Exec code", nowait = true, remap = false },
			},
			{
				"<leader>p",
				"<cmd>SessionSearch<cr>",
				desc = "Search workspace/project",
				nowait = true,
				remap = false,
			},
		},
	})
end

M.lazy = {
	"folke/which-key.nvim",
	dependencies = {
		"echasnovski/mini.icons",
		version = false,
	},
	event = "VeryLazy",
	config = load_config,
	init = function()
		vim.o.timeout = true
		vim.o.timeoutlen = 500
	end,
}

return M.lazy
